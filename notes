

:l ALife.Creatur.Wain.UIVector.Cluster.Experiment
import ALife.Creatur.Wain.UIVector.Cluster.Universe
u <- loadUniverse :: IO (Universe PatternWain)
(Right w) <- evalStateT (getAgent "spaeth_01-1_3226") u
(Right w) <- evalStateT (getAgent "archive/spaeth_01-1_39") u
:set -fbreak-on-exception
:set stop :list
let p = O.PObject [0.0256410256410256,0.833333333333333] "debug"
let w2 = O.AObject w
:trace evalStateT (chooseAction3 w p w2) u


:trace evalStateT (run [w,w,w]) u
:trace evalStateT ALife.Creatur.Clock.currentTime c


let dObj = p
let iObj = w2

let (lds, sps, rplos, aos, r, w') = W.chooseAction [O.objectAppearance dObj, O.objectAppearance iObj] w
:trace rplos
length rplos

let (r, p2, l, o) = head rplos
λ> :trace r
Response {_labels = [1,0], _action = Ignore, _outcomes = [Stopped at <exception thrown>
_exception ∷ e = _
Unable to list source for <exception thrown>
Try :back then :list
λ> :back
Logged breakpoint at src/ALife/Creatur/Wain/UIVector/Cluster/Action.hs:31:13-16
_result ∷ ShowS
30                  | Flirt | Ignore
31    deriving (Show, Eq, Ord, Enum, Bounded, Generic)
32  instance Serialize Action


import  ALife.Creatur.Wain.BrainInternal
let c = (_classifier . W._brain) w
Cl.classifySetAndTrain c [O.objectAppearance dObj]

let b = W._brain w

import ALife.Creatur.Wain.Probability
import qualified ALife.Creatur.Wain.Predictor as P
import ALife.Creatur.Wain.Muser

let ps = [O.objectAppearance dObj, O.objectAppearance iObj]
let (cBmus, lds, b2) = classifyInputs b ps
let sps = errorIfNull "sps" $ hypothesise lds
let sps' = filter (P.hasScenario (_predictor b) . fst) sps
let spsSafe = if null sps' then sps else sps'
let rps = errorIfNull "rps" $ generateResponses (_muser b2) spsSafe :: [(Response Action, Probability)]
_outcome (rps !! 8) is out of range!!!!



let m = _muser b2 ∷ Muser
let sps = [([0,0],0.3079286399059518),([0,1],0.10441557526057245),([1,0],0.43884706005529434),([1,1],0.14880872477818152)] :: [([P.Label], Probability)]


(_muser . W._brain) w
makeMuser ([5.49764202623002e11,0.6519417105363545,0.854337376974136,-0.20482185091935612]) 1
The problem is that the first element in the list is out of bounds!!!

W._genome w

==============================================================

:l ALife.Creatur.Wain.UIVector.Cluster.Experiment

let (g1,g2) = ([0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,140,0,0,0,0,0,0,0,38,0,0,0,0,0,0,2,28,0,0,0,0,0,0,0,3,0,0,0,0,0,0,19,78,0,3,0,0,0,0,0,0,89,232,0,0,0,0,0,0,217,232,0,6,0,0,0,0,0,0,118,17,0,0,0,0,0,0,186,203,0,0,0,0,0,0,155,247,0,0,0,0,0,0,87,44,1,0,0,0,0,0,0,0,0,147,232,0,0,0,0,0,0,0,13,0,0,0,0,0,0,2,28,0,0,0,0,0,0,0,238,0,0,0,0,0,0,60,33,0,6,0,0,0,0,0,0,243,156,0,0,0,0,0,0,103,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,229,207,0,6,0,0,0,0,0,0,213,55,0,0,0,0,0,0,152,125,0,0,0,0,0,0,245,21,0,0,0,0,0,0,187,82,0,0,0,0,0,0,48,113,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,188],[0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,140,0,0,0,0,0,0,0,38,0,0,0,0,0,0,2,28,0,0,0,0,0,0,0,3,0,0,0,0,0,0,19,78,0,3,0,0,0,0,0,0,89,232,0,0,0,0,0,0,217,232,0,6,0,64,0,0,0,0,118,17,0,0,0,0,0,0,186,203,0,0,0,0,0,0,155,247,0,0,0,0,0,0,87,44,1,0,0,0,0,0,0,0,0,147,232,0,0,0,0,0,0,0,13,0,0,0,0,0,0,2,28,0,0,0,0,0,0,0,238,0,0,0,0,0,0,60,33,0,6,0,0,0,0,0,0,243,156,0,0,0,0,0,0,103,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,229,207,0,6,0,0,0,0,0,0,213,55,0,0,0,0,0,0,152,125,0,0,0,0,0,0,245,21,0,0,0,0,0,0,187,82,0,0,0,0,0,0,48,113,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,188]) :: ([GHC.Word.Word8],[GHC.Word.Word8])



import qualified ALife.Creatur.Genetics.BRGCWord8 as G
let (Right w1) = G.read $ g1 :: Either [String] (W.Wain [UIDouble] PatternTweaker Action)
let (Right w2) = G.read $ g2 :: Either [String] (W.Wain [UIDouble] PatternTweaker Action)

import  ALife.Creatur.Wain.BrainInternal
(_defaultOutcomes . _muser . W._brain) w2 -- first outcome is out of bounds!!!

import ALife.Creatur.Wain.MuserInternal
G.write $ (_defaultOutcomes . _muser . W._brain) w2

let x = head $ (_defaultOutcomes . _muser . W._brain) w2
[0,0,0,0,0,0,128,0]

import ALife.Creatur.Wain.PlusMinusOne
let (Right x') = G.read [0,0,0,0,0,0,128,0] :: Either [String] PM1Double



let (Right x') = G.read [0,6,0,64,0,0,0,0] :: Either [String] PM1Double
x' -- 3.4377040135004e10 out of bounds!!!

============================================================

:l ALife.Creatur.Wain.UIVector.Cluster.Experiment
import ALife.Creatur.Wain.UIVector.Cluster.Universe
u <- loadUniverse :: IO (Universe PatternWain)
(Right w) <- evalStateT (getAgent "archive/spaeth_01-1_624") u
import  ALife.Creatur.Wain.BrainInternal

(_muser . W._brain) w -- OK
import ALife.Creatur.Wain.GeneticSOMInternal
import Data.Map.Lazy
concatMap _outcomes $ (elems . modelMap ._predictor . W._brain) w
and . Data.List.map (>= -1) . concatMap _outcomes $ (elems . modelMap ._predictor . W._brain) w
and . Data.List.map (<= 1) . concatMap _outcomes $ (elems . modelMap ._predictor . W._brain) w
currentLearningRate $ (_predictor . W._brain) w
concat $ (elems . modelMap ._classifier . W._brain) w
and . Data.List.map (>= 0) . concat $ (elems . modelMap ._classifier . W._brain) w
and . Data.List.map (<= 1) . concat $ (elems . modelMap ._classifier . W._brain) w
currentLearningRate $ (_classifier . W._brain) w
(_happinessWeights . W._brain) w
(_tiebreaker . W._brain) w
(_imprintOutcomes . W._brain) w
(_actionCounts . W._brain) w

import ALife.Creatur.WainInternal
_appearance w


===============================================================

160324144842+0000       1441    DEBUG W Wain {_name = "spaeth_01-1_515", _appearance = [0.0,0.0], _brain = Brain (GeneticSOM (SGM (fromList [(0,([1.8959504334352345e-3,5.839885817298436e-5],62)),(1,([0.6636016816522305,0.8550453802728234],46))]) (toLearningFunction (LearningParams 0.8262572502385869 3.022687580985622e-4 1000)) 2 0.13056139474955888 False (diff (PatternTweaker (Weights [0.48325248844814683,0.5608556461484622]))) (adjust (PatternTweaker (Weights [0.48325248844814683,0.5608556461484622]))) 2) (LearningParams 0.8262572502385869 3.022687580985622e-4 1000) (PatternTweaker (Weights [0.48325248844814683,0.5608556461484622]))) (makeMuser ([0.7012104827799202,0.2359917502579788,5.0045196422230376e-2,2.125911978955186e-2]) 1) (GeneticSOM (SGM (fromList [(0,(Response {_labels = [0,1], _action = Flirt, _outcomes = [8.086302872284812e-2,0.8627716546105003,8.175544307899174e-2,0.9436737942190392]},3)),(1,(Response {_labels = [1,0], _action = Cooperate_b, _outcomes = [5.6036886396310825e-2,4.782894382535839e-2,2.419545335024363e-2,7.177186274443281e-2]},12)),(2,(Response {_labels = [0,1], _action = Cooperate_f, _outcomes = [0.5855629715659865,0.5257859718657495,0.2659818289306523,0.7889916771628399]},2)),(3,(Response {_labels = [0,0], _action = Cooperate_b, _outcomes = [0.13053415681905983,0.11513892701748024,5.8245871947762484e-2,0.17277687118941798]},3)),(4,(Response {_labels = [1,0], _action = Cooperate_f, _outcomes = [4.613284732553875e-2,3.894371148514633e-2,1.97006389680014e-2,5.843872960432803e-2]},4)),(5,(Response {_labels = [1,0], _action = Cooperate_h, _outcomes = [3.0000000000000027e-3,0.0,0.0,0.0]},1)),(6,(Response {_labels = [1,0], _action = Ignore, _outcomes = [0.0,0.0,0.0,0.0]},1)),(7,(Response {_labels = [0,0], _action = Cooperate_a, _outcomes = [3.0000000000000027e-3,0.0,0.0,0.0]},1)),(8,(Response {_labels = [0,0], _action = Cooperate_h, _outcomes = [3.0000000000000027e-3,0.0,0.0,0.0]},1)),(9,(Response {_labels = [1,0], _action = Cooperate_e, _outcomes = [3.0000000000000027e-3,0.0,0.0,0.0]},1)),(10,(Res160324144842+0000       1441    WARNING: Unhandled exception: value 1.000383245446669 not in (0,1)
1



import  ALife.Creatur.WainInternal
import  ALife.Creatur.Wain.BrainInternal
import  ALife.Creatur.Wain.GeneticSOMInternal
import  ALife.Creatur.Wain.ResponseInternal
import  ALife.Creatur.Wain.WeightsInternal
import ALife.Creatur.Wain.Predictor
import Data.Datamining.Clustering.SGMInternal

===============================================================
01_8,0.897435897435897,0.888888888888889
01_10,1,0.861111111111111

:l ALife.Creatur.Wain.UIVector.Cluster.Experiment
import ALife.Creatur.Wain.UIVector.Cluster.Universe
u <- loadUniverse :: IO (Universe PatternWain)


/home/eamybut/atsfsx115/alife/spaeth_01-1/19305_spaeth_01-1_5863.subject
/home/eamybut/atsfsx115/alife/spaeth_01-1/19305_spaeth_01-1_5863.dObj
/home/eamybut/atsfsx115/alife/spaeth_01-1/19305_spaeth_01-1_5863.iObj

Right w <- fmap DS.decode $ BS.readFile("/home/eamybut/atsfsx115/alife/spaeth_01-1/19305_spaeth_01-1_5863.subject") :: IO (Either String PatternWain)
Right dObj <- fmap DS.decode $ BS.readFile("/home/eamybut/atsfsx115/alife/spaeth_01-1/19305_spaeth_01-1_5863.dObj") :: IO (Either String Object)
Right iObj <- fmap DS.decode $ BS.readFile("/home/eamybut/atsfsx115/alife/spaeth_01-1/19305_spaeth_01-1_5863.iObj") :: IO (Either String Object)
let (lds, sps, rplos, aos, r, w') = W.chooseAction [O.objectAppearance dObj, O.objectAppearance iObj] w

import  ALife.Creatur.Wain.BrainInternal
let c = (_classifier . W._brain) w
Cl.classifySetAndTrain c [O.objectAppearance dObj]

import qualified ALife.Creatur.Wain.GeneticSOM as S
let p = O.objectAppearance dObj
S.trainAndClassify c p

import qualified Data.Datamining.Clustering.SGMInternal as SOM
import Control.Lens
let gs = c
let s = view S.patternMap gs
let (bmu, bmuDiff, diffs, s') = SOM.trainAndClassify s p -- ERROR

SOM.models s
p

import ALife.Creatur.Wain.UnitInterval
map (uiVectorDiff p) (SOM.models s)

let r = S.currentLearningRate c
map (adjustUIVector p r) (SOM.models s)

import qualified Data.Map.Strict as M
let diffs = M.toList . M.map (SOM.difference s p) . M.map fst . SOM.toMap $ s

map (uiVectorDiff p) (SOM.models s) -- OK
map (SOM.difference s p) (SOM.models s) -- ERROR

let p1:p2:[] = SOM.models s


SOMEHOW uiVectorDiff IS NOT THE SAME AS SOM.difference
That's because it's weightedUIVectorDiff!!!!!

let (PatternTweaker ws) = S._tweaker c
import ALife.Creatur.Wain.Weights

Weights aren't normalised!!!!!!!!



Creating amy2 data
==================
import ALife.Creatur.Util (shuffle)

let f0 a = (a - 0.05, a + 0.05)
let f2 a b = do x <- getRandomR (f0 a); y <- getRandomR (f0 b); return (x, y)
let f3 n a b = replicateM n $ f2 a b
let f4 s n = take n $ zipWith (++) (repeat s) (map show [0..])

let f s n a b = zip (f4 s n) <$> f3 n a b


as <- (f "a_" 100 0.2 0.2)
bs <- (f "b_" 100 0.4 0.6)
cs <- (f "c_" 100 0.8 0.8)

ds <- evalRandIO (ALife.Creatur.Util.shuffle $  as ++ bs ++ cs)

let f5 (a, (b, c)) = a ++ ',':show b ++ ',':show c
writeFile "/home/eamybut/néal/spaeth/amy2.csv" (unlines $ map f5 ds)
insert "id,x,y" as first line of file

